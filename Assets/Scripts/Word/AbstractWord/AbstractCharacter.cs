using System.Collections;
using System.Collections.Generic;
using UnityEngine;
[RequireComponent(typeof(CharaAnim))]
[RequireComponent(typeof(AI.MyState0))]
[RequireComponent(typeof(Animator))]
[RequireComponent(typeof(BoxCollider2D))]
[RequireComponent(typeof(AudioSource))]
/// <summary>
/// 抽象角色类
/// </summary>
abstract public class AbstractCharacter : AbstractWords0
{
    /// <summary>序号</summary>
    public int characterID;
    /// <summary>性别</summary>
    public GenderEnum gender;
    /// <summary>形象</summary>
    public Animator appearance;
    /// <summary>AudioSource</summary>
    public AudioSource source;
    /// <summary>平A音效(手动拖拽）</summary>
    public AudioClip aAttackAudio;
    /// <summary>走路音效（手动拖拽）</summary>
    public AudioClip walkAudio;
    /// <summary>人物暴击默认台词（弃用）</summary>
    public string criticalSpeak;
    /// <summary>人物死亡默认台词（弃用）</summary>
    public string deadSpeak;
    /// <summary>身份(弃用）</summary>
    public AbstractRole role;

    /// <summary>特效</summary>
    public TeXiao teXiao;
    /// <summary>子弹(手动挂）</summary>
    public GameObject bullet;
    /// <summary>发出子弹 </summary>
    public virtual void CreateBullet(GameObject aimChara) { }

    /// <summary>阵营</summary>
    public CampEnum camp;
    /// <summary>血量</summary>
    public float hp = 0;
    /// <summary>总血量</summary>
    public float maxHP = 0;
    /// <summary>蓝量（弃用）</summary>
    public float sp = 0;
    /// <summary>总蓝量（弃用）</summary>
    public float maxSP = 0;
    /// <summary>攻击力</summary>
    protected float ATK = 0;
    virtual public float atk
    {
        get { return ATK; }
        set { ATK = value; }
    }
    /// <summary>防御力</summary>
    protected float DEF = 0;
    virtual public float def
    {
        get { return DEF; }
        set { DEF = value; }
    }
    /// <summary>精神力</summary>psychic force
    protected float PSY = 0;
    virtual public float psy
    {
        get { return PSY; }
        set { PSY = value; }
    }
    /// <summary>意志力</summary>
    protected float SAN = 0;
    virtual public float san
    {
        get { return SAN; }
        set { SAN = value; }
    }
    /// <summary>主属性</summary>
    public Dictionary<string,string> mainProperty;
    /// <summary>性格</summary>
    public AbstractTrait trait;
    /// <summary>身份名</summary>
    public string roleName;
    /// <summary>拥有技能（所挂组件,自带技能/身份 在初始赋值）</summary>
    public List<AbstractVerbs> skills;
    /// <summary>暴击几率(暴击即为2倍)</summary>
    public float criticalChance = 0;
    /// <summary>暴击倍数(弃用）</summary>
    public float multipleCriticalStrike = 0;
    /// <summary>攻击间隔(检定攻击的次序，以及每两次攻击间隔时长)</summary>
    public float attackInterval = 0;
    /// <summary>技能速度(弃用）(用于减少该人物所有技能的CD，尽量不要这个值)</summary>
    public float skillSpeed = 0;
    /// <summary>闪避几率(弃用)</summary>
    public float dodgeChance = 0;

    /// <summary>站位</summary>
    public Situation situation;
    /// <summary>攻击射程</summary>
    public int attackDistance = 0;
    /// <summary>幸运值(弃用)</summary>
    public int luckyValue = 0;
    /// <summary>等级(弃用）</summary>
    public int level = 1;
    /// <summary>经验(弃用）（0-100）</summary>
    public int exp = 0;
    /// <summary>怪级别(弃用）（友方为0）</summary>
    public int enemyLevel = 0;
    /// <summary>主属性(弃用）</summary>
    public MainSortEnum mainSort = 0;
    /// <summary>角色动画</summary>
    public CharaAnim charaAnim;
    /// <summary>剩余眩晕时间</summary>
    public float dizzyTime;
    /// <summary>是否有复活状态</summary>
    public bool reLifes;
    /// <summary>所有buff《buffID，是否有buff》</summary>
    public Dictionary<int,int> buffs;
    /// <summary>重要之人序号</summary>
    public List<int> importantNum=new List<int>();
    

    virtual public void Awake()
    {
        teXiao=GetComponentInChildren<TeXiao>();
        source=this.GetComponent<AudioSource>();
        buffs= new Dictionary<int,int>();
        charaAnim=GetComponent<CharaAnim>();

        AbstractCharacter[] a= GameObject.Find("SelfCharacter").GetComponentsInChildren<AbstractCharacter>();
        AbstractCharacter b=CollectionHelper.Find(a,p=>p.wordName!=wordName); 
        AbstractBook.beforeFightText += ShowText(b);
    }

    virtual public void FixedUpdate()
    {
        if(dizzyTime>0)
        {
            dizzyTime-= Time.deltaTime;
            //负数归零写在DizzyState的Exit中
        }
        #region 数值限制
        if (hp < 0)
        {
            hp = 0;
        }
        if(hp>maxHP)
        {
            hp=maxHP;
        }
        if(def<-19)
        {
            def = -19;
        }
        if(san<-19)
        {
            san= -19;
        }
        #endregion
    }
    /// <summary>
    /// 升级
    /// </summary>
    /// <returns></returns>
    /*virtual public bool LevelUp()
    {
        if (exp < 100)
            return false;
        else
        {
            level++;
            exp -= 100;
            hp += role.growHP;
            atk += role.growATK;
            def += role.growDEF;
            sp+=trait.growSP;
            psy += trait.growPSY;
            san += trait.growSAN;
            return true;
        }
    }*/

    /// <summary>
    /// 判断该角色是否有该buff
    /// </summary>
    public bool HasBuff(int buffID)
    {
        if (!buffs.ContainsKey(buffID))
            return false;
        else if(buffs[buffID] <= 0)
            return false;
        else
            return true;
    }

    /// <summary>
    /// 加个buff
    /// </summary>
    /// <param name="buffID"></param>
    public void AddBuff(int buffID)
    {
        if (!buffs.ContainsKey(buffID))
            buffs.Add(buffID, 1);
        else
            buffs[buffID]++;
    }

    /// <summary>
    /// 去个buff
    /// </summary>
    /// <param name="buffID"></param>
    public void RemoveBuff(int buffID)
    {
            buffs[buffID]--;
    }
    /// <summary>
    /// 人物出场文本(加到AbstractBook.beforeFightText)
    /// </summary>
    abstract public string ShowText(AbstractCharacter otherChara);

    /// <summary>
    /// 暴击文本(加到AbstractBook.afterFightText)
    /// </summary>
    abstract public string CriticalText(AbstractCharacter otherChara);

    /// <summary>
    /// 低血量文本(加到AbstractBook.afterFightText)
    /// </summary>
    abstract public string LowHPText();

    /// <summary>
    /// 死亡文本(加到AbstractBook.afterFightText)
    /// </summary>
    abstract public string DieText();
}

